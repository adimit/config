* Essential key bindings
** Tumx-like frame splitting
Split windows like in Tmux (but without the prefix key.)

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w \"") 'split-window-below)
  (define-key evil-normal-state-map (kbd "C-w %") 'split-window-horizontally)
#+end_src

** Save with RET in normal mode
Save buffer when hitting RET in normal mode.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "<RET>") 'save-buffer)
#+end_src

And use RET to get out of editing and org-mode code block

#+begin_src emacs-lisp
  (evil-define-key 'normal org-src-mode-map (kbd "<RET>") 'org-edit-src-exit)
  (evil-define-key 'normal org-src-mode-map (kbd "<backspace>") 'org-edit-src-abort)
#+end_src
* Settings
** Mail
*** Settings
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir "~/.maildir"
        mu4e-view-show-addresses t
        mu4e-use-fancy-chars t
        mu4e-view-show-images t
        message-kill-buffer-on-exit t
        mu4e-headers-include-related t
        mu4e-headers-skip-duplicates t
        mu4e-attachment-dir "~/Downloads"
        mu4e-installation-path "~/local/mu/share/emacs/site-lisp/mu4e"
        mu4e-confirm-quit nil
        mu4e-context-policy 'pick-first
        send-mail-function 'smtpmail-send-it)
#+END_SRC
*** Bookmarks
We define =make-mu4e-segregated-bookmark= to not mix work and private mails
together. It creates twin bookmarks that query only the private and work
mailboxes respectively.
 #+BEGIN_SRC emacs-lisp
   (let ((private-mail-query
          "NOT flag:trashed AND NOT maildir:/kerio/ AND NOT \"maildir:/gmail/[Google Mail].Spam\"")
         (work-mail-query
          "maildir:/kerio/ AND NOT flag:trashed"))
     (defun make-mu4e-segregated-bookmark (name query key1 key2)
       (list (make-mu4e-bookmark :name (concat name " (private)")
                                 :query (concat query " AND " private-mail-query)
                                 :key key1)
             (make-mu4e-bookmark :name (concat name " (work)")
                                 :query (concat query " AND " work-mail-query)
                                 :key key2)))
     (setq mu4e-bookmarks
           (append
            (make-mu4e-segregated-bookmark "Unread" "flag:unread" ?u ?U)
            (make-mu4e-segregated-bookmark "Last 7 days" "date:7d..now" ?w ?W)
            (make-mu4e-segregated-bookmark "With attachment" "flag:attach" ?a ?A)
            (make-mu4e-segregated-bookmark "Today" "date:today..now" ?t ?T)
            (make-mu4e-segregated-bookmark "Picture attachments" "mime:image/*" ?p ?P)
            (make-mu4e-segregated-bookmark "Flagged" "flag:flagged" ?f ?F))))
 #+END_SRC
** Default Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
#+END_SRC
* Modes
** Major
*** magit
Don't ask to save open files when opening magit window, just do it.

#+BEGIN_SRC emacs-lisp
  (setq magit-save-repository-buffers 'dontask)
#+END_SRC

WIP-mode tries to avoid data loss at the expense of performance. ~SPC g w~
brings up the current log. We don't use =magit-wip-merge-branch= so that the
WIP commits get garbage collected.

# Disabled, because it doesn't seem to be available anymore?
# #+BEGIN_SRC emacs-lisp
#   (magit-wip-mode t)
#   (spacemacs/set-leader-keys "gw" 'magit-wip-log-current)
#   (setq magit-wip-merge-branch nil
#         magit-no-confirm '(safe-with-wip))
# #+END_SRC

*** org-mode
**** Agenda
Custom agendas
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("w" todo-tree "TODO")))
#+END_SRC
**** Footnotes
Place footnotes in the same section
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-section nil)
#+END_SRC
**** Supported LaTeX cls
Add a =book_noparts= class — the same as =book=, but skipping the parts at top-level.
There has to be a more elegant way than just setting the variable, but
=add-to-list= didn't seem to work.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-classes
        '(("article" "\\documentclass[11pt]{article}"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

          ("report" "\\documentclass[11pt]{report}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

          ("book_noparts" "\\documentclass{book}"
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

          ("book" "\\documentclass[11pt]{book}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC
**** Habits
Tracking habits in org mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-habit)
#+END_SRC
**** Agenda files
Add agenda files if they exist (they do not exist on all machines I use)
#+BEGIN_SRC emacs-lisp
  (let ((file-list
         '("~/org/main.org"
           "~/Documents/work.org")))
    (--each (--filter (file-readable-p it) file-list)
      (add-to-list 'org-agenda-files it)))
#+END_SRC
**** Ordered Tasks
Enforce ordered tasks
#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        org-agenda-dim-blocked-tasks t)
#+END_SRC
**** Notes
Take notes into a specialised drawer, but keep clock logbook where it's supposed
to be.
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "NOTES")
  (setq org-clock-into-drawer "LOGBOOK")
  (setq org-log-state-notes-into-drawer "LOGBOOK")
#+END_SRC
**** org-ref
#+BEGIN_SRC emacs-lisp
  (setq org-ref-default-bibliography '("~/doc/lib/bib/main.bib")
        org-ref-pdf-directory "~/doc/lib/"
        org-ref-bibliograpy-notes "~/doc/org/notes.org")

  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (start-process "mupdf" "*helm-bibtex-mupdf*" "/usr/bin/mupdf" fpath)))
#+END_SRC
**** Global Settings
***** Default ORG Directory
#+begin_src emacs-lisp
   (setq org-directory (concat (getenv "HOME") "/org"))
#+end_src
***** Indentation
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented 1)
#+END_SRC
**** Capture
Capturing to default location
#+begin_src emacs-lisp
   (setq org-default-notes-file (concat org-directory "/notes.org"))
   (define-key evil-normal-state-map (kbd "SPC o c") 'org-capture)
   (define-key evil-normal-state-map (kbd "SPC o l") 'org-capture-goto-last-stored)
#+end_src

Add templates
#+begin_src emacs-lisp
  (setq org-capture-templates
  '(("t" "Todo" entry (file+headline "~/org/main.org"
                                     "In")
     "* TODO %^{Title} %^g\n%i%?\n%a\n%t")
    ("c" "Current clock" entry (clock)
     "* %^{Title}\n%?"
     :prepend)
    ("w" "Work" entry (file+headline "~/Documents/work.org"
                                     "In")
     "* TODO %^{Title} %^g\n%i%?\n%a\n%t")))

#+end_src
**** Refiling
#+BEGIN_SRC emacs-lisp
   (setq org-refile-use-outline-path nil)
   (setq org-refile-targets '((nil . (:maxlevel . 3))))
   (setq org-outline-path-complete-in-steps nil)
#+END_SRC
**** DONE Citation setup
CLOSED: [2015-11-01 Sun 22:30]
***** Settings
Set the bibtex library, PDF program, and where the pdf files live.
#+begin_src emacs-lisp
   (setq org-link-abbrev-alist
         '(("bib" . "~/doc/lib/bib/main.bib::%s")))
   (setq reftex-default-bibliography '("/home/aleks/doc/lib/bib/main.bib"))
   (setq org-cite-link-pdf-program "mupdf")
   (setq org-cite-link-library "/home/aleks/doc/lib/%s.pdf")
#+end_src
***** Open PDFs in Library
#+begin_src emacs-lisp
   (defun open-pdf-from-library (path)
     "Open a pdf from a bibtex identifier. This is a hack, and should probably be
   done differently, but it works for now."
     (let* ((full-path (format org-cite-link-library path)))
       (if (file-exists-p full-path)
           (progn
             (start-process (format "%s-%s" org-cite-link-pdf-program path)
                            (format "*%s-process*" org-cite-link-pdf-program)
                            (format "/usr/bin/%s" org-cite-link-pdf-program)
                            full-path)
             (message "Viewing %s" path))
         (user-error (format "Couldn't find reference: '%s'" full-path)))))
#+end_src
***** Export commands
#+begin_src emacs-lisp
   (defun org-cite-link-export (command path desc format)
     (cond
      ((eq format 'latex) (format "\\%s{%s}" command path))))

   (org-add-link-type "autocite" 'open-pdf-from-library
                      (lambda (path desc format)
                        (org-cite-link-export "autocite" path desc format)))
   (org-add-link-type "textcite" 'open-pdf-from-library
                      (lambda (path desc format)
                        (org-cite-link-export "textcite" path desc format)))
#+end_src
***** Org & Reftex
#+begin_src emacs-lisp
   (defun org-mode-reftex-setup ()
     (message "Loading org mode reftex setup.")
     (load-library "reftex")
     (and (buffer-file-name) (file-exists-p (buffer-file-name))
          (progn ;enable auto-revert-mode to update reftex when bibtex file changes on disk
            (global-auto-revert-mode t)
            (reftex-parse-all)
            (reftex-set-cite-format
             '((?c . "[[autocite:%l]]")
               (?t . "[[textcite:%l]]"))))))

   (add-hook 'org-mode-hook 'org-mode-reftex-setup)
#+end_src
**** Fill mode
Enable auto-fill mode for org-mode by default
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
**** DONE LaTeX export
CLOSED: [2016-05-01 Sun 13:11]
This uses minted and pygments to set source code written in Babel. The
=-shell-escape= option to XeLaTeX is a bit dangerous, so you shouldn't just
set arbitrary downloaded TeX-documents with it.
It also sets our TeX processing engine to XeLaTeX, which is as it should be.
#+begin_src emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted" nil))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process
        '("latexmk --shell-escape -xelatex %f"))
#+end_src
***** Preamble
The default preamble includes stuff that is not very compatible wiht XeLaTeX,
so we overwrite the it.
#+begin_src emacs-lisp
  (setq org-latex-default-packages-alist
        '(("" "fontspec" nil)
          ("" "csquotes" nil)
          ; Xelatex-compatible Emacs-default content of this variable
          ("" "graphicx" nil)
          ("" "grffile" nil)
          ("" "rotating" nil)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("" "capt-of" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("breaklinks,colorlinks,citecolor=blue" "hyperref" nil)
          "\\tolerance=1000"
          ; Polyglossia has to be loaded last for some reason I don't remember.
          ("" "polyglossia" nil)))
#+end_src
***** Quotes
Use the csquotes package (don't forget to put it in the default header.)
#+begin_src emacs-lisp
   (setq org-export-with-smart-quotes t)

   ; Add English csquotes style
   (add-to-list
    'org-export-smart-quotes-alist
    '("en"
      (primary-opening   :utf-8 "“"
                         :html "&ldquo;"
                         :latex "\\enquote{"
                         :texinfo "``")
      (primary-closing   :utf-8 "”"
                         :html "&rdquo;"
                         :latex "}"
                         :texinfo "''")
      (secondary-opening :utf-8 "‘"
                         :html "&lsquo;"
                         :latex "\\enquote*{"
                         :texinfo "`")
      (secondary-closing :utf-8 "’"
                         :html "&rsquo;"
                         :latex "}"
                         :texinfo "'")
      (apostrophe        :utf-8 "’"
                         :html "&rsquo;")))

   ; Add German csquotes style
   (add-to-list
    'org-export-smart-quotes-alist
    '("de"
     (primary-opening   :utf-8 "„"
                        :html "&bdquo;"
                        :latex "\\enquote{"
                        :texinfo "@quotedblbase{}")
     (primary-closing   :utf-8 "“"
                        :html "&ldquo;"
                        :latex "}"
                        :texinfo "@quotedblleft{}")
     (secondary-opening :utf-8 "‚"
                        :html "&sbquo;"
                        :latex "\\enquote*{"
                        :texinfo "@quotesinglbase{}")
     (secondary-closing :utf-8 "‘"
                        :html "&lsquo;"
                        :latex "}"
                        :texinfo "@quoteleft{}")
     (apostrophe        :utf-8 "’"
                        :html "&rsquo;")))
#+end_src
**** LaTeX Fragment Code Formatting
#+begin_src emacs-lisp
  ; This is the stupidest way to add anything to anything but fuck knows how plists actually work.
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))
  (setq org-format-latex-options (plist-put org-format-latex-options :background (face-attribute 'default :background)))
  (setq org-format-latex-options (plist-put org-format-latex-options :foreground "white"))

  (setq org-latex-create-formula-image-program 'imagemagick)
#+end_src
**** org-babel
The list of languages which can be evaluated in an org-mode buffer
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-babel-load-languages '(latex . t))
#+END_SRC

Don't ask when exporting latex files
#+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "latex")))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC
**** TaskJuggler
#+BEGIN_SRC emacs-lisp
  (require 'ox-taskjuggler)
#+END_SRC
**** Structure templates
Reset the org-structure-template-alist. For some reason, it was polluted.
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("l" . "export latex")
          ("q" . "quote")
          ("s" . "src")
          ("v" . "verse")))
#+END_SRC

*** Haskell
Use stack by default.
#+begin_src emacs-lisp
 (setq haskell-process-type 'stack-ghci)
#+end_src
*** JavaScript
#+BEGIN_SRC emacs-lisp
  (setq-default
   js-indent-level 2
   css-indent-offset 2
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-attr-indent-offset 2)

  (defun my/use-eslint-from-node-modules ()
    (let ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 (lambda (dir)
                   (let ((eslint (expand-file-name "node_modules/.bin/eslint" dir)))
                     (and eslint (file-executable-p eslint)))))))
      (when root
        (let ((eslint (expand-file-name "node_modules/.bin/eslint" root)))
          (setq-local flycheck-javascript-eslint-executable eslint)))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

  (defun tslint-fix-file ()
    (interactive)
    (let ((the-command (concat "yarn tslint --fix " (buffer-file-name))))
      (message (concat "Running " the-command))
      (shell-command the-command)))

  (defun my-typescript-mode-hook ()
    (prettier-js-mode)
    (setq spacemacs-jump-handlers (cons '(tide-jump-to-definition :async t) ())))

  (setq-default typescript-indent-level 2)

  (add-hook 'typescript-mode-hook 'my-typescript-mode-hook)
  (add-hook 'typescript-tsx-mode-hook 'my-typescript-mode-hook)
#+END_SRC

** Minor
*** Avy
Reduce the delay on =avy-goto-line=.
#+begin_src emacs-lisp
  (setq avy-timeout-seconds 0.2)
#+end_src

*** prettify-symbols-mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
*** flyspell
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_GB")
  (setq ispell-local-dictionary-alist
        '(("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
#+END_SRC
*** TODO Hexl mode
*** whitespace
#+begin_src emacs-lisp
   (setq whitespace-style '(face trailing tabs tab-mark))
   (global-whitespace-mode)
#+end_src
*** writeroom-mode
Increase the width of writeroom-mode, especially necessary in org-mode buffers.
#+begin_src emacs-lisp
   (setq writeroom-width '90)
#+end_src
