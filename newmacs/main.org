* Package Setup

** Straight setup

#+begin_src emacs-lisp
  (custom-set-variables
   '(straight-use-package-by-default t))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Use-Package

Historically, I've used =use-package= for its nice keyword support. The setting of =straight-use-package-by-default= means that =use-package= won't use =package.el=, but =straight.el=.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

* Basic Setup
** Auth
** Backups

No files with =~= everywhere. Prevent creation of lockfiles, as that confuses some watch tasks (notably webpack dev server.)

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(backup-directory-alist `(("." . "~/.saves")))
   '(create-lockfiles nil))
#+END_SRC

** Bindings

#+BEGIN_SRC emacs-lisp
  (use-package general
    :after (evil counsel)
    :config
    (general-define-key
     :states 'normal
     "M-x" 'counsel-M-x
     "RET" 'save-buffer)
    (general-define-key
     :states 'normal
     :prefix ","
     "," (general-simulate-key "M-x")
     "f f" 'counsel-find-file

     "g s" 'magit-status
     "g f" 'magit-file-dispatch
     "g b" 'magit-blame

     "a" 'org-agenda

     "b b" 'counsel-switch-buffer
     "b d" 'kill-current-buffer

     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p b" 'projectile-switch-to-buffer

     "w n" 'make-frame-command
     "w c" 'evil-window-delete
     "w o" 'other-window
     "w s" 'evil-window-split
     "w v" 'evil-window-vsplit))
#+END_SRC

** Calendar
Calendar is set up for European style display (Monday starts week) and manual location of Tübingen, Germany (for sunrise/sunset).
Tübingen Hbf is: =48.516738, 9.055493=

#+BEGIN_SRC emacs-lisp
  (defvar holiday-baden-württemberg-holidays
    '((holiday-fixed 1 1 "Neujahr")
      (holiday-fixed 1 6 "Heilige Drei Könige")
      (holiday-fixed 5 1 "Tag der Arbeit")
      (holiday-fixed 10 3 "Tag der deutschen Einheit")
      (holiday-fixed 11 1 "Allerheiligen")
      (holiday-fixed 12 25 "Erster Weihnachtsfeiertag")
      (holiday-fixed 12 26 "Zweiter Weihnachtsfeiertag")
      (holiday-easter-etc -2 "Karfreitag")
      (holiday-easter-etc +1 "Ostermontag")
      (holiday-easter-etc +39 "Christi Himmelfahrt")
      (holiday-easter-etc +50 "Pfingstmontag")
      (holiday-easter-etc +60 "Fronleichnam")))

  (use-package calendar
    :defer t
    :custom
    (calendar-week-start-day 1)
    (calendar-latitude 48.516738)
    (calendar-longitude 9.055493)
    (calendar-location-name "Tübingen, Germany")
    (calendar-holidays (append holiday-solar-holidays
                               holiday-baden-württemberg-holidays))
    (calendar-date-style 'european)
    (calendar-time-display-form
     '(24-hours ":" minutes (if time-zone (concat " (" time-zone ")")))))

#+END_SRC

Here's a function that returns whether it's currently dark outside, so you don't have to look.

#+begin_src emacs-lisp
  (defun aleks/is-it-dark-p ()
    "Return t if it's dark outside, otherwise nil.

  Will look at the `current-time' and calculate sunset and sunrise times
  according to `calendar-longitude' and `calendar-latitude' using
  `solar-sunrise-sunset'so make sure you've set your location."
    (require 'solar)
    (let* ((solar (solar-sunrise-sunset (calendar-current-date)))
	 (sunrise (car (car solar)))
	 (sunset (car (car (cdr solar))))
	 (time (decode-time (current-time)))
	 (hour (nth 2 time))
	 (minute (nth 1 time))
	 (minute-fraction (/ minute 60.0))
	 (time-decimal (+ hour minute-fraction)))
    (or (> time-decimal sunset) (< time-decimal sunrise))))
#+end_src

** Customisations

Don't store customisations, they usually surprise me by being there and making things not work as expected.

#+begin_src emacs-lisp
  (customize-set-variable 'custom-file null-device)
#+end_src

** Evil
*** Basic settings
Activate evil mode
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :config
    (global-undo-tree-mode -1))

  (use-package evil
    :init
    (custom-set-variables
     '(evil-want-keybinding nil)
     '(evil-want-integration t))
    :custom
    (evil-respect-visual-line-mode t)
    (evil-want-Y-yank-to-eol t)
    (evil-undo-system 'undo-fu)
    (evil-want-C-u-delete t)
    (evil-want-C-u-scroll t)
    :config
    (evil-mode t))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-calendar-want-org-bindings nil)
    (evil-collection-outline-bind-tab-p t)
    (evil-collection-term-sync-state-and-mode-p t)
    :config
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode t))

  (use-package evil-exchange
    :config (evil-exchange-install))

  (use-package evil-goggles
    :after evil
    :config (evil-goggles-mode))
#+END_SRC

*** Multi-cursor
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
    :config
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
    :general
    (:states 'visual
             "R" 'evil-multiedit-match-all
             "r" 'evil-multiedit-match-and-next)
    (:states 'normal :prefix ", r"
             "r" 'evil-multiedit-match-and-next
             "R" 'evil-multiedit-match-all)
    (:states 'multiedit
             "RET" 'evil-multiedit-toggle-or-restrict-region
             "n" 'evil-multiedit-next
             "N" 'evil-multiedit-prev
             "M-r" 'evil-multiedit-match-all
             "SPC" 'evil-multiedit-match-and-next
             "S-SPC" 'evil-multiedit-match-and-prev))
#+END_SRC


** Region and IEdit

=evil-iedit-state= builds off of =expand-region= to provide the functionality to edit multiple occurrences of the current region.

#+begin_src emacs-lisp
  (use-package expand-region
    :general (:states 'normal :prefix ","
                      "SPC" 'er/expand-region))
  (use-package evil-iedit-state
    :after expand-region)
#+end_src

** Server
Enable emacs server mode.

#+begin_src emacs-lisp
  (server-mode)
#+end_src

There are two shell aliases that help with server mode:

#+begin_src shell
  alias ec=emacsclient -n
  alias ecc=emacsclient -cn
#+end_src

=ecc= opens another frame, and =ec= just re-uses an existing frame.

** Window Manager
Emacs needs to be told about how the window manager operates. There's also a [[https://github.com/emacs-lsp/lsp-ui/issues/464][persistent bug with posframe]] that affects both company and lsp-ui this works around

#+begin_src emacs-lisp
  (custom-set-variables
   '(focus-follows-mouse 'auto-raise)
   '(mouse-autoselect-window nil))
#+end_src
* Visual Configuration
** Indent Guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character))
#+end_src

** Faces & Theme

Instead of using a package like =org-variable-pitch-mode=, the following definition takes care of setting up which parts of =org-mode= are fixed pitch.

#+begin_src emacs-lisp
  (defun aleks/set-org-mode-fixed-pitch-faces ()
    (mapc (lambda (face) (set-face-attribute face nil :inherit 'fixed-pitch))
          `(org-block
            org-special-keyword
            org-drawer
            org-todo
            org-done
            org-priority
            org-checkbox
            org-block-end-line
            org-block-begin-line
            org-table org-verbatim)))

#+end_src

In order to be able to set different faces depending on the theme, we define two separate functions for setting faces.

#+begin_src emacs-lisp
  (defun aleks/set-light-mode-faces ()
    "Set the faces for light mode."
    (custom-set-faces
     '(variable-pitch ((t (:family "Bitter" :height 180))))
     '(fixed-pitch ((t (:family "Fira Code" :height 170))))
     '(default ((t (:family "Fira Code" :height 170))))))

  (defun aleks/set-dark-mode-faces ()
    "Set the faces for dark mode."
    ; the light mode faces work well for dark mode right now
    (aleks/set-light-mode-faces))
#+end_src

I'm using Prot's modus themes for light and dark mode. They're only loaded here, not enabled.

#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-scale-headings t)
    (modus-themes-slanted-constructs t)
    (modus-themes-scale-1 1.1)
    (modus-themes-scale-2 1.2)
    (modus-themes-scale-3 1.3)
    (modus-themes-scale-4 1.4)
    (modus-themes-scale-5 1.5)
    (modus-themes-mode-line '3d)
    :init
    (modus-themes-load-themes))
#+end_src

Finally, let's define dark and light mode…

#+begin_src emacs-lisp
  (defun aleks/dark-mode ()
    "Set theme and fonts for dark mode."
    (interactive)
    (modus-themes-load-vivendi)
    (aleks/set-org-mode-fixed-pitch-faces)
    (aleks/set-dark-mode-faces)
    (highlight-indent-guides-auto-set-faces))

  (defun aleks/light-mode ()
    "Set theme and fonts for dark mode."
    (interactive)
    (modus-themes-load-operandi)
    (aleks/set-org-mode-fixed-pitch-faces)
    (aleks/set-light-mode-faces)
    (highlight-indent-guides-auto-set-faces))
#+end_src

And here's a function that can choose the correct theme according to the current sunset/sunrise time. I don't like automatic switching, as switching themes introduces lag and is rather disruptive.

#+begin_src emacs-lisp
  (defun aleks/auto-choose-theme ()
    "Choose between dark and light based on sunrise/sunset time."
    (interactive)
    (if (aleks/is-it-dark-p)
        (aleks/dark-mode)
      (aleks/light-mode)))
#+end_src

When starting up, choose a theme based on the current time.

#+begin_src emacs-lisp
  (with-eval-after-load 'calendar
    (aleks/auto-choose-theme))
#+end_src

** Miscellaneous Improvements

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (global-hl-line-mode)
  (set-face-attribute hl-line-face nil :underline nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (custom-set-variables
   '(inhibit-startup-screen t)
   '(indent-tabs-mode nil)
   '(initial-scratch-message "")
   '(mouse-yank-at-point t))
#+END_SRC

** Mode line

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-bar-width 3)
    (doom-modeline-icon (display-graphic-p))
    (doom-modeline-major-mode-icon t)
    (doom-modeline-github t)
    (doom-modeline-github-interval (* 30 60))
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-buffer-state-icon nil)
    (doom-modeline-mu4e t)
    (doom-modeline-buffer-encoding nil)
    :config
    (custom-set-faces
     '(mode-line ((t (:family "Bitter" :height 1.0))))
     '(mode-line-inactive ((t (:family "Bitter" :height 1.0)))))
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC

** Show Trailing Whitespace
Switch on highlighting of trailing white space, and provide a facility to turn it off on a per-mode base, as for some modes it's not useful.

#+begin_src emacs-lisp
  (custom-set-variables '(show-trailing-whitespace t))

  (defun aleks/disable-show-trailing-whitespace ()
      "Disable trailing whitespace."
      (setq show-trailing-whitespace nil))

  (add-hook 'calendar-mode-hook 'aleks/disable-show-trailing-whitespace)
#+end_src
** Support Emojis
You know you want it, too. 😼 Using =emojify= mostly for Emoji insertion. Display via Noto Color Emoji font. Enable Emojify mode for github style emojis in Forge Post mode.

#+begin_src emacs-lisp
  (set-fontset-font t 'symbol "Noto Color Emoji")
  (set-fontset-font t 'symbol "Symbola" nil 'append)

  (use-package emojify
    :hook (forge-post-mode . emojify-mode))
#+end_src

** Text mode buffers

Text mode buffers have spell check enabled, are narrowed, and use variable pitch and word wrap.

#+begin_src emacs-lisp
  (defun aleks/text-mode-hook ()
    (flyspell-mode)
    (visual-line-mode)
    (variable-pitch-mode)
    (olivetti-mode))

  (add-hook 'text-mode-hook 'aleks/text-mode-hook)
#+end_src

** Transparency

Set up a slight transparency, fade out unfocused frames. Otherwise what do I have pretty desktop backgrounds for?

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 80))
  (add-to-list 'default-frame-alist '(alpha . (90 . 80)))
#+end_src

* Extensions
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1)
    :custom
    (beacon-blink-delay 0.15)
    (beacon-blink-duration 0.15))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :custom
    (company-dabbrev-downcase nil)
    (company-dabbrev-ignore-case nil)
    (company-idle-delay 0)
    :config
    (global-company-mode)
    :general
    (:keymaps 'company-active-map
              "C-n" 'company-select-next
              "C-p" 'company-select-previous
              "C-f" 'company-filter-candidates))
#+END_SRC

Posframe mode allows completions to not look silly in =variable-pitch-mode=.

#+begin_src emacs-lisp
  (use-package company-posframe
    :config (company-posframe-mode 1))
#+end_src

** Diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config (global-diff-hl-mode)
    :custom (diff-hl-side 'right))
#+END_SRC

** Dired

Show dired as sidebar and add keybindings for toggle & full dired.

#+begin_src emacs-lisp
  (customize-set-variable 'dired-dwim-target t)
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  (use-package dired-toggle
    :general
    (:states 'normal :prefix ", d"
             "d" (lambda () (interactive) (dired "."))
             "h" 'dired-toggle)
    (:keymaps 'dired-mode-map
   "q" 'evil-window-delete)
    :bind
    ([remap dired-find-file] . #'dired-toggle-find-file)
    ([remap dired-up-directory] . #'dired-toggle-up-directory)
    :custom
    (dired-toggle-window-size 32)
    (dired-toggle-window-side 'left)
    :hook
    (dired-toggle-mode . (lambda () (interactive)
                           (visual-line-mode 1)
                           (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
                           (setq-local word-wrap nil))))
#+end_src

** Editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config (editorconfig-mode 1))
#+END_SRC

** Elfeed

Here's the list of subscribed feeds.

#+begin_src emacs-lisp
  (defcustom aleks/subscribed-feeds
    (list "https://www.smbc-comics.com/comic/rss"
          "https://xkcd.com/rss.xml"
          "https://fedoramagazine.org/feed/"
          "https://augengeradeaus.net/feed/"
          "https://updates.orgmode.org/feed/help"
          "https://updates.orgmode.org/feed/bugs")
    "List of feeds to subscribe to")
#+end_src

Elfeeds keybindings are completely broken with evil, so we need to redefine them all.

#+begin_src emacs-lisp
  (use-package elfeed
    :hook (elfeed-show-mode . olivetti-mode)
    :commands (elfeed)
    :custom
    (elfeed-feeds aleks/subscribed-feeds))
#+end_src

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC

*** Checkdoc in org src edit buffers
=checkdoc= will insist on headers, footers, commentary sections etc. in all your elisp code, including code that's opened with =org-src-edit=, which makes no sense at all. The corresponding function is =checkdoc-comments= and it runs whenever =buffer-file-name= is set. Org src edit buffers do set a file name, so =checkdoc= happily checks their comments. There's no way to exclude just one kind of check, so we just disable checkdoc in =org-src-edit= buffers.

#+begin_src emacs-lisp
  (defun disable-checkdoc ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  (add-hook 'org-src-mode-hook 'disable-checkdoc)
#+end_src

** Guess-Language
#+begin_src emacs-lisp
  (use-package guess-language
    :hook (text-mode . (lambda () (guess-language-mode 1)))
    :custom
    (guess-language-languages '(en de))
    (guess-language-langcodes '((en . ("en_GB" "English"))
                                (de . ("de_DE" "German")))))
#+end_src
** Ivy & Counsel

Perhaps try [[https://github.com/raxod502/selectrum][selectrum]] one of these days?

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t))
  (use-package counsel)

  (use-package all-the-icons-ivy
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+END_SRC

*** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config (ivy-prescient-mode 1))
  (use-package company-prescient
    :config (company-prescient-mode 1))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :custom (read-process-output-max (* 1024 1024))
    :general
    (:states 'normal
     ", l x" 'lsp-execute-code-action
     "M-RET" 'lsp-execute-code-action))

  (use-package lsp-ui
    :custom
    (lsp-ui-doc-header t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-delay 1)
    (lsp-ui-doc-use-childframe 't)
    (lsp-ui-sideline-show-diagnostics nil)
    :general
    (:states 'normal
     :prefix ", l"
     "h" 'lsp-ui-doc-hide
     "d" 'lsp-describe-thing-at-point
     "u" 'lsp-ui-doc-unfocus-frame
     "f" 'lsp-ui-doc-focus-frame
     "l" 'flycheck-list-errors
     "n" 'flycheck-next-error
     "p" 'flycheck-previous-error))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

*** Add Issue Number to Commit Message
Insert the current ticket number if we're on a =KNUTH= feature branch.

#+begin_src emacs-lisp
  (defun buffer-insert-at-end (string)
    "Insert STRING at the maximal point in a buffer."
    (save-excursion
      (goto-char (point-max))
      (end-of-line)
      (insert ?\n string)
      (unless (string-suffix-p "\n" string)
        (insert ?\n))))

  (defun get-knuth-number-from-string (string)
    "Return KNUTH issue number from STRING.
  Return nil if STRING does not contain a KNUTH issue.
  STRING may be nil."
    (if (and string (string-match "\\(KNUTH-[[:digit:]]\+\\)" string))
        (match-string 1 string)
      nil))

  (defun insert-knuth-ticket-number-from-branch ()
    "If we're on a KNUTH feature branch, insert the ticket number."
    (interactive)
    (let ((knuth (get-knuth-number-from-string (magit-get-current-branch))))
      (if (and knuth (not (buffer-line-matches-p (concat "^" knuth)))) (buffer-insert-at-end knuth))))

  (defun buffer-line-matches-p (needle)
    "Return t if the last line matches NEEDLE.
  Ignores comments"
    (save-excursion
      (goto-char 0)
      (search-forward-regexp needle nil 'noerror)))

  (add-hook 'git-commit-setup-hook 'insert-knuth-ticket-number-from-branch)
#+end_src

** Mu4e

The context definitions are in =private.org=.

=set-from-line= manages identities: always answer with the =to:= email address when it's to one of my private email addresses. Manage mailing list identities separately (I know of no automatic way, unfortunately.)

#+begin_src emacs-lisp
  (defun aleks/set-from-line ()
    "Set From: address based on To: address of original email.  Also set mailing list addresses."
    (when mu4e-compose-parent-message
      (cond
       ((mu4e-message-contact-field-matches mu4e-compose-parent-message :to "aleks.bg")
        (setq user-mail-address (cdr (car (mu4e-message-field mu4e-compose-parent-message :to)))))
       ((mu4e-message-contact-field-matches mu4e-compose-parent-message :list-post "emacs-orgmode")
        (setq user-mail-address "org@list.aleks.bg")))))

  (use-package mu4e
    :load-path "~/.local/share/emacs/site-lisp/mu4e/"
    :commands mu4e
    :config
    (aleks/load-org-file "private.org")
    (evil-set-initial-state 'mu4e-headers-mode 'normal)
    (add-to-list 'mu4e-headers-actions '("in browser" . mu4e-action-view-in-browser) t)
    (add-to-list 'mu4e-view-actions '("in browser" . mu4e-action-view-in-browser) t)
    :hook
    (mu4e-view-mode . aleks/disable-show-trailing-whitespace)
    (mu4e-headers-mode . aleks/disable-show-trailing-whitespace)
    (mu4e-compose-mode . aleks/set-from-line)
    :custom
    (require 'org-mu4e)
    (shr-color-visible-luminance-min 80)
    (mail-user-agent 'mu4e-user-agent)
    (mu4e-update-interval 60)
    (message-send-mail-function 'smtpmail-send-it)
    (mu4e-use-fancy-chars t)
    (mu4e-attachment-dir "~/Downloads")
    (mu4e-view-show-images t)
    (mu4e-headers-fields '((:human-date . 25)
                           (:flags . 6)
                           (:from . 22)
                           (:thread-subject . nil))))
#+END_SRC
*** Thread Folding
#+begin_src fundamental
  (straight-register-package
   '(mu4e-thread-folding
     :host github
     :repo "rougier/mu4e-thread-folding"
     :files ("*.el")))

  (require 'color)

  (use-package mu4e-thread-folding
    :config
    (add-to-list 'mu4e-header-info-custom
                 '(:empty . (:name "Empty"
                                   :shortname ""
                                   :function (lambda (msg) "  "))))
    :custom
    (mu4e-headers-fields '((:empty . 2)
                           (:human-date . 12)
                           (:flags .  6)
                           (:mailing-list . 10)
                           (:from . 22)
                           (:thread-subject . 100))))
#+end_src
** Olivetti

#+begin_src emacs-lisp
  (use-package olivetti)
#+end_src

** Pair Programming Mode
#+begin_src emacs-lisp
  (defvar pair-programming--pair-programmer
    nil
    "The current pair programmer as (name email)")

  (defun enable-pair-programming-mode ()
    "Sets visuals for pair programming mode and prompt for your buddy."
    (global-display-line-numbers-mode 1)
    (let ((pair-programmer (git-commit-read-ident nil)))
      (setq pair-programming--pair-programmer pair-programmer)
      (message (concat "Pair programming with " (car pair-programmer)))))

  (defun disable-pair-programming-mode ()
    "Disable pair programming visuals and settings."
    (setq pair-programming--pair-programmer nil)
    (global-display-line-numbers-mode -1)
    (message "PP mode disabled"))

  (define-minor-mode pair-programming-mode ()
    "Toggle Pair Programming Mode.

  This prompts for a pair programmer from your current git commit history.
  When you commit with (ma)git, the pair programmer is inserted as a co-author.
  Additionally, line number mode is enabled."
    :global t
    :lighter " PP"
    (if pair-programming-mode
        (enable-pair-programming-mode)
      (disable-pair-programming-mode)))

  (defun insert-pair-programmer-as-coauthor ()
    "Insert your pair programer into the current git commit."
    (when (and pair-programming-mode git-commit-mode)
      (pcase pair-programming--pair-programmer
        (`(,name ,email) (git-commit-insert-header "Co-authored-by" name email))
        (_ (error "No pair programmer found or wrong content")))))

  (add-hook 'git-commit-setup-hook 'insert-pair-programmer-as-coauthor)
#+end_src
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    :custom
    (projectile-completion-system 'ivy))
#+END_SRC

** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    (prog-mode . show-paren-mode) ; not smartparens, but eh
    :custom
    (show-paren-delay 0)
    :config
    (require 'smartparens-config)
    :general
    (:states 'normal :prefix "["
                      "s" 'sp-forward-slurp-sexp
                      "S" 'sp-backward-slurp-sexp
                      "b" 'sp-forward-barf-sexp
                      "B" 'sp-backward-barf-sexp)
    (:states 'normal :prefix "["
             "[" 'sp-beginning-of-sexp
             "{" 'sp-up-sexp)
    (:states 'normal :prefix "]"
             "]" 'sp-end-of-sexp
             "}" 'sp-down-sexp))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :general
    (:states 'normal
     :prefix ", s"
     "s" 'rg-dwim
     "p" 'rg-project
     "l" 'rg-list-searches
     "S" 'rg-save-search))
#+END_SRC

** Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (concat (file-name-as-directory (getenv "HOME")) "org/roam"))
    (org-roam-completion-system 'ivy)
    :general
    (:states 'normal
             ", f r" 'org-roam-find-file)
    (:states 'normal :definer 'minor-mode :keymaps 'org-roam-mode :prefix ", ."
             "i" 'org-roam-insert
             "I" 'org-roam-insert-immediate
             "b" 'org-roam-buffer-toggle-display))
#+END_SRC

** Smerge
#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :modes 'smerge-mode
   :prefix ", d"
   "n" 'smerge-next
   "p" 'smerge-prev
   "j" 'smerge-keep-lower
   "k" 'smerge-keep-upper
   "c" 'smerge-keep-all
   "X" 'smerge-keep-base
   "x" 'smerge-swap
   "r" 'smerge-resolve)
#+end_src

** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :hook (treemacs-mode . variable-pitch-mode)
    :general
    (:states 'normal
             :prefix ", t"
             "t" 'treemacs
             "f" 'treemacs-find-file
             "p" 'treemacs-projectile
             "P" 'treemacs-add-and-display-current-project)
    :config
    (treemacs-follow-mode t)
    (treemacs-git-mode 'deferred)
    (treemacs-filewatch-mode 0))

  (use-package treemacs-evil :after treemacs evil)
  (use-package treemacs-projectile :after treemacs projectile)
  (use-package treemacs-magit :after treemacs magit)
#+END_SRC

** Tree-Sitter

Disabled for now, I'm having ABI version problems I can't address, due to lack of time.
#+begin_src fundamental
  ;; Core APIs.
  (straight-register-package
   '(tsc :host github
         :repo "ubolonton/emacs-tree-sitter"
         :files ("core/*.el")))

  (use-package tree-sitter
    :straight (tree-sitter :type git
                           :host github
                           :repo "ubolonton/emacs-tree-sitter"
                           :files ("lisp/*.el"))
    :hook
    (typescript-mode . tree-sitter-mode)
    (typescript-mode . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :straight (tree-sitter-langs :type git
                                 :host github
                                 :repo "ubolonton/emacs-tree-sitter"
                                 :files ("langs/*.el" "langs/queries"))
    :after tree-sitter)
#+end_src

** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    :custom
    (yas-snippet-dirs '("~/config/newmacs/snippets")))
#+end_src
* File Modes
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode "\\.css$"
    :custom (css-indent-offset 2))
  (use-package scss-mode
    :mode ("\\.scss$" "\\.sass$"))
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.[ct]sv$")
#+END_SRC

** Dart
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :mode "\\.dart$")

  (use-package lsp-dart
    :hook (dart-mode . lsp-deferred)
    :custom
    (lsp-dart-sdk-dir (concat (file-name-as-directory (getenv "HOME"))
                              "local/dart-sdk")))
#+END_SRC

We also want some Flutter support

#+BEGIN_SRC emacs-lisp
  (use-package flutter
    :after dart-mode
    :custom (flutter-sdk-path (concat (file-name-as-directory (getenv "HOME")) "local/flutter")))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode :mode "Dockerfile")
#+END_SRC

** Emacs-Lisp
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'emacs-lisp-mode-map
   :prefix ", ."
   "e e" 'eval-last-sexp
   "e b" 'eval-buffer)
#+END_SRC

** Fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :mode "\\.fish$")
#+END_SRC

** Gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot-mode)
  (use-package gnuplot)
#+end_src
** Graphql
#+BEGIN_SRC emacs-lisp
  (use-package request)

  (use-package graphql-mode
    :load-path "~/src/graphql-mode/"
    :mode "\\.graphql$"
    :custom (graphql-indent-level 4))
#+END_SRC

** Groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :mode "build\\.gradle" "\\.groovy$")
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs$")
#+END_SRC

** JS & friends

*** Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json$"
    :config
    (add-to-list 'flycheck-disabled-checkers 'json-python-json))
#+END_SRC

*** JS
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

*** Prettier

Prettier currently needs some help to work with =straight.el=, see [[https://github.com/raxod502/straight.el/issues/621][this issue]].

#+begin_src emacs-lisp
  (use-package prettier
    :hook
    ((typescript-mode json-mode) . prettier-mode))
#+end_src

*** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode "\\.tsx?$"
    :hook
    (typescript-mode . lsp)
    :custom
    (typescript-indent-level 2))
#+END_SRC

** Kotlin
Only basic support :(

#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode
    :mode "\\.kt$")
#+END_SRC

** Ledger
#+BEGIN_SRC emacs-lisp
  (defun browse-paypal-history-at-point ()
    "Open paypal.com order history.  The search term is an exact date range from `thing-at-point'."
    (interactive)
    (let ((date (substring (replace-regexp-in-string
                            (regexp-quote "/") "-"
                            (thing-at-point 'symbol 'no-props)
                            nil 'literal)
                           0 10)))
      (browse-url (concat "https://www.paypal.com/myaccount/transactions/?start_date=" date "&end_date=" date))))

  (defun browse-amazon-history-at-point ()
    "Open amazon.de order history.  The search term is `thing-at-point'."
    (interactive)
    (browse-url (concat "https://www.amazon.de/gp/your-account/order-history/?search=" (thing-at-point 'symbol 'no-props))))

  (use-package ledger-mode
    :mode "hledger\\.journal$" "\\.ledger$"
    :general
    (:states 'normal :keymaps 'ledger-mode-map :prefix ", ."
             "a" 'browse-amazon-history-at-point
             "p" 'browse-paypal-history-at-point))

  (use-package flycheck-ledger
    :after flycheck ledger-mode)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :mode "\\.lua$"
    :interpreter "lua")
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md$"
    :custom (markdown-fontify-code-blocks-natively t))
#+END_SRC

** Org-Mode
*** Installation
Side-load =org-plus-contrib= (for =ox-confluence=) and set up some
mostly visual hooks. Also ensure that code is displayed in fixed pitch
in org mode.

#+BEGIN_SRC emacs-lisp
  (defcustom org-directory (concat (file-name-as-directory (getenv "HOME")) "org") "Org directory.")
  (defcustom my-org-main-file (concat (file-name-as-directory org-directory) "main.org") "Personal Org agenda file.")
  (defcustom my-org-work-file (concat (file-name-as-directory org-directory) "work.org") "Professional Org agenda file.")

  (use-package org
    :ensure org-plus-contrib
    :mode ("\\.org$" . org-mode)
    :hook
    (org-mode . org-indent-mode)
    (org-mode . variable-pitch-mode)
    (org-agenda-mode . olivetti-mode)
    (org-agenda-mode . variable-pitch-mode)
    :config
    (aleks/set-org-mode-fixed-pitch-faces)
    (org-clock-persistence-insinuate)
    (require 'ox-confluence)
    :custom
    (org-tags-column
     0
     "Aligning tags is broken with variable pitch")
    (org-clock-persist
     t
     "Clocks survive closing Emacs.")
    (org-confirm-babel-evaluate
     nil
     "Don't prompt when executing babel src blocks.")
    (org-startup-folded t)
    (org-footnote-section
     nil
     "Place footnotes in the same section they're referenced")
    (org-hide-emphasis-markers t)
    (org-babel-confirm-evaluate nil "I trust my org files")
    (org-log-into-drawer t "Add a logbook drawer")

                                          ; Refiling
    (org-outline-path-complete-in-steps
     nil
     "Use a flat list instead of hierarchichal steps")
    (org-refile-targets
     '((nil . (:maxlevel . 4)))
     "Don't descend more than 4 levels for refiling")
    (org-refile-use-outline-path
     'file
     "Include file names when refiling")

                                          ; Agenda
    (org-agenda-include-diary t)
    (org-agenda-window-setup 'current-window)
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-files
     `(,my-org-main-file ,my-org-work-file))
    (diary-file (concat (file-name-as-directory org-directory) "diary"))
    (org-agenda-custom-commands
     '(("R" "Weekly Review"
        ((todo "TODO" ((org-agenda-overriding-header "Unfinished")
                       (org-agenda-files `(,my-org-main-file))))
         (agenda "" ((org-agenda-span 7)
                     (org-agenda-overriding-header "Week")))))
       ("x" "Test block"
        ((agenda "" ((org-agenda-span 4)
                     (org-agenda-overriding-header "Schedule")))
         (todo "TODO" ((org-agenda-compact-blocks 't)
                       (org-agenda-overriding-header "Current Tasks")))))))
    :general
    (:states 'normal :keymaps 'org-mode-map :prefix ", ."
             "'" 'org-edit-special
             "i" 'org-insert-structure-template
             "o" 'org-open-at-point
             "h" 'org-promote-subtree
             "l" 'org-demote-subtree
             "a" 'org-archive-subtree
             "s" 'org-schedule
             "d" 'org-deadline
             "e" 'org-set-effort
             "c c" 'org-clock-in
             "c i" 'org-clock-in
             "c o" 'org-clock-out
             "c g" 'org-clock-goto
             "c x" 'org-clock-cancel
             "r" 'org-refile)
    (:states 'normal :keymaps 'org-mode-map :prefix ","
             "'" 'org-edit-special)
    (:states 'normal :prefix ", c"
             "c" 'org-capture
             "l" 'org-capture-goto-last-stored
             "i" 'org-clock-in-last
             "g" 'org-clock-goto
             "o" 'org-clock-out)
    (:states 'normal :definer 'minor-mode :keymaps 'org-src-mode
             "RET" 'org-edit-src-exit
             "<backspace>" 'org-edit-src-abort)
    (:states 'normal :definer 'minor-mode :keymaps 'org-capture-mode
             "RET" 'org-capture-finalize
             "<backspace>" 'org-capture-kill
             ", . r" 'org-capture-refile)
    (:keymaps 'org-agenda-mode-map
              "k" 'org-agenda-previous-line
              "j" 'org-agenda-next-line
              "I" 'org-agenda-diary-entry
              "i" 'org-agenda-clock-in
              "s" 'org-agenda-schedule
              "c" 'org-capture
              "O" 'delete-other-windows
              "o" 'org-agenda-clock-out))
#+END_SRC

There's a bug either in my config, or perhaps in org-mode itself: =org-clocking-buffer= is undefined, but it is referred to by many places in =org-clock.el=. This [[https://orgmode.org/list/87mtvjd15c.fsf@kyleam.com/T/][patch]] has a fix: we only need to provide an alias.

#+begin_src emacs-lisp
  (defalias 'org-clocking-buffer #'org-clock-is-active)
#+end_src

Additionally, =org-journal= is misbehaving. =org-journal-mark-entries= is missing? I just define a dummy to make =calendar= work:

#+begin_src emacs-lisp
  (defun org-journal-mark-entries ()
    "A dummy function, because the real implementation is gone?")
#+end_src

These hacks should probably be removed at some point. They were added
<2021-03-21 So>

*** Prettification

Prettier lists, by substituting bullet points for list item markers.

#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

This hides heading bullets for a cleaner look.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '(" "))
    (org-fontify-whole-heading-line t)
    (org-pretty-entities t))
#+END_SRC

Org-appear allows easy editing of inline markup when it's hidden.

#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    (org-appear-autoemphasis t)
    :straight (org-appear :type git
                :host github
                :repo "awth13/org-appear"))

#+end_src
*** Agenda
Let's add sunrise and sunset to the agenda via diary entries.
#+begin_src emacs-lisp
  (defun read-solar-decimal-time (frac)
    "Read a solar decimal and render a formatted 24h time."
    (let* ((time (round (* 60 frac))))
      (format "%02d:%02d" (/ time 60) (% time 60))))

  (defun get-sunrise-sunset-data ()
    "Get a list of the current solar data."
    (pcase (solar-sunrise-sunset (calendar-current-date))
      (`((,sunrise ,time-zone) (,sunset ,time-zone) ,daylight-hours)
       `(,(read-solar-decimal-time sunrise)
         ,(read-solar-decimal-time sunset)
         ,daylight-hours))))


  (defun diary-sunrise () (pcase (get-sunrise-sunset-data)
                            (`(,sunrise ,sunset ,daylight) (format "%s (%sh)" sunrise daylight))))

  (defun diary-sunset () (nth 2 (get-sunrise-sunset-data)))
#+end_src
*** Clock MRU

Clock into a list of most recently used tasks for quick task switching.

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :custom
    (org-mru-clock-how-many 20)
    (org-mru-clock-completing-read 'ivy-completing-read)
    :general
    (:states 'normal :prefix ", c"
             "r" 'org-mru-clock-in
             "R" 'org-mru-clock-select-recent-task))
#+end_src

*** Capture

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'org-capture-templates
        '(("c" "Add to today" entry (file+regexp my-org-main-file "Week [0-9][0-9]?")
           "* TODO %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
          ("w" "Add to week" entry (file+regexp my-org-main-file "Week [0-9][0-9]?")
           "* TODO %?\nSCHEDULED: %^t\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
          ("C" "Add to current" entry (clock)
           "- [ ] %i%?"
           :prepend t)
          ("u" "Urgent item" entry (file+headline my-org-work-file "NEW")
           "* TODO %^{Title}\n:PROPERTIES:\n:CREATED: %U\n:Reference: %f %a\n:END:\n%i%?"
           :clock-in t)
          ("s" "Add sprint task" entry (file+headline my-org-work-file "Tasks")
           "* TODO %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:REFERENCE: %f %a\n:END:\n%i")
          ("j" "Add Jira ticket" entry (file+headline my-org-work-file "Tasks")
           "* TODO KNUTH-%^{KNUTH} %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:REFERENCE: http://xjira/browse/KNUTH-%\\1\n:END:\n%i")
          ("S" "Sprint" entry (file my-org-work-file)
           (function (lambda () (string-join
            '("* Sprint %^{Title} [[http://xjira/secure/RapidBoard.jspa?rapidView=292&quickFilter=2360][(board)]]"
              ""
              "** Meetings"
              "*** Daily"
              "*** Refinement"
              "*** Sprint Review"
              "*** Retro"
              "*** SP1"
              "*** SP2"
              "** Overhead"
              "*** Calls"
              "*** Code Review"
              "*** Emails"
              "** Tasks"
              "%i%?")
            "\n")))
           :jump-to-captured t)))
#+END_SRC
*** Reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :custom
    (org-reveal-root "file:///home/aleks/src/talks/reveal.js-4.1.0")
    (org-reveal-hlevel 2))
  (use-package htmlize)
#+END_SRC

*** Protocol

#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC

In order to get Gnome to handle the URL correctly, save this to =~/.local/share/applications/org-protocol.desktop=.

#+BEGIN_SRC conf
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
#+END_SRC

and run

#+BEGIN_SRC shell
  update-desktop-database ~/.local/share/applications/
#+END_SRC

Then use the following bookmarklet for capturing:

#+BEGIN_SRC fundamental
  javascript:location.href='org-protocol://capture://c/'+
        encodeURIComponent(location.href)+'/'+
        encodeURIComponent(document.title)+'/'+
        encodeURIComponent(window.getSelection())
#+END_SRC

Note the =/c/= in the URL, it denotes the capture template we want to use.

Further details are in [[https://orgmode.org/worg/org-contrib/org-protocol.html][the documentation]].

*** Ref

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :custom
    (reftex-default-bibliography '("~/doc/lib/bib/main.bib"))
    (org-ref-default-bibliography '("~/doc/lib/bib/main.bib"))
    (org-ref-pdf-directory "~/doc/lib")
    (org-ref-bibliography-notes "~/doc/lib/notes.org")
    (bibtex-completion-pdf-open-function 'org-open-file)
    (org-ref-completion-library 'org-ref-ivy-cite))
#+END_SRC

*** TeX
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :custom (lsp-python-ms-auto-install-server t)
    :hook (python-mode . lsp-mode))
#+end_src
** R
#+begin_src emacs-lisp
    (use-package ess
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((R . t))))
#+end_src
** REST

Rest client with company backend & org support.

#+begin_src emacs-lisp
  (use-package restclient
    :mode "\\.rest$")

  (use-package company-restclient
    :after (restclient)
    :config
    (add-to-list 'company-backends 'company-restclient))

  (use-package ob-restclient
    :after (restclient)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((restclient . t))))
#+end_src
** Rust

Use =rust-analyzer=, as =rls= is somewhat obsolete.

#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :custom
    (rustic-format-trigger 'on-save)
    (rustic-lsp-server 'rust-analyzer)
    (lsp-rust-server 'rust-analyzer)
    (lsp-rust-analyzer-server-command '("~/.local/bin/rust-analyzer")))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml$")
#+END_SRC

