* Emacs config
** Package Configuration
*** Fix TLS
A temporary workaround is needed while [[https://github.com/syl20bnr/spacemacs/issues/12535][this issue]] is still in
effect. Fixes TLS with melpa, which caused some packages to not be
visible.

#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

*** Melpa
Add Melpa source
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

*** Use-Package
Try to always download the packages that =use-package= wants to have installed.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Backups
No files with =~= everywhere.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

** Theme
*** Theme
Use =all-the-icons= for some eyecandy in the modeline
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

Use doom themes for modeline & overall theming
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-italic t)
    (doom-themes-enable-bold t)
    :config
    (load-theme 'doom-nord t)
    (doom-themes-org-config))


  (use-package doom-modeline
    :custom
    (doom-modeline-icon t)
    (doom-modeline-buffer-file-name-style 'buffer-name)
    (doom-modeline-buffer-state-icon nil)

    :hook
    (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-mu4e t
          doom-modeline-buffer-encoding nil))
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Ubuntu" :height 110 :weight light :width normal))))
   '(fixed-pitch ((t ( :family "Fira Code" :slant normal :weight normal :height 110 :width narrow)))))
#+END_SRC

** Server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

** Visual improvements
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (global-hl-line-mode)
  (set-face-attribute hl-line-face nil :underline nil)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq-default
   inhibit-startup-screen t
   indent-tabs-mode nil
   initial-scratch-message ""
   mouse-yank-at-point t
   show-trailing-whitespace t)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Word Wrap
#+BEGIN_SRC emacs-lisp
  (defun my-text-mode-hook ()
    (flyspell-mode)
    (visual-line-mode)
    (writeroom-mode))

  (add-hook 'text-mode-hook 'my-text-mode-hook)
#+END_SRC

** Keybindings
This is a function to set up keybindings with hydra & evil. It
should get called after both evil and general are loaded.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-define-key
     :states 'normal
     "M-x" 'counsel-M-x
     "RET" 'save-buffer)
    (general-define-key
     :states 'normal
     :prefix ","
     "," (general-simulate-key "M-x")
     "TAB" 'switch-to-prev-buffer
     "f" 'counsel-find-file
     "g s" 'magit-status

     "a" 'org-agenda

     "b b" 'counsel-switch-buffer
     "b d" 'kill-current-buffer

     "p p" 'projectile-switch-project
     "p f" 'projectile-find-file
     "p b" 'projectile-switch-to-buffer

     "w n" 'make-frame-command
     "w c" 'evil-window-delete
     "w o" 'other-window
     "w s" 'evil-window-split
     "w v" 'evil-window-vsplit))
#+END_SRC

* Extensions
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (beacon-mode 1)
    (setq beacon-blink-delay 0.15)
    (setq beacon-blink-duration 0.15))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0.2)
    (global-company-mode))
  (use-package company-posframe
    :config (company-posframe-mode 1))
#+END_SRC

** Diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (setq-default diff-hl-side 'right)
    :init
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** Editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :config (editorconfig-mode 1))
#+END_SRC

** Evil
*** Basic settings
Activate evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-surround
    :config
    (global-evil-surround-mode t))

  (use-package evil-exchange
    :config (evil-exchange-install))
#+END_SRC

*** Multi-cursor
#+BEGIN_SRC emacs-lisp
  (use-package evil-multiedit
    :config
    (general-define-key
     :states 'visual
     "R" 'evil-multiedit-match-all
     "r" 'evil-multiedit-and-next)
    (general-define-key
     :states 'normal
     :prefix ", r"
     "r" 'evil-multiedit-match-and-next
     "R" 'evil-multiedit-match-and-prev)
    (general-define-key
     :states 'multiedit
     "RET" 'evil-multiedit-toggle-or-restrict-region
     "M-n" 'evil-multiedit-next
     "M-p" 'evil-multiedit-prev)
    (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode))
#+END_SRC

** Ivy & Counsel
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t))
  (use-package counsel)
#+END_SRC

*** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode 1))
  (use-package ivy-prescient
    :config (ivy-prescient-mode 1))
  (use-package company-prescient
    :config (company-prescient-mode 1))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp lsp-deferred
    :config (setq read-process-output-max (* 1024 1024))
    (general-define-key
     :states 'normal
     :prefix ", l"
     "x" 'lsp-execute-code-action))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config (setq lsp-ui-doc-header t
                  lsp-ui-doc-position 'at-point
                  lsp-ui-doc-use-childframe nil)
    (general-define-key
     :states 'normal
     :prefix ", l d"
     "h" 'lsp-ui-doc-hide
     "d" 'lsp-describe-thing-at-point
     "u" 'lsp-ui-doc-unfocus-frame
     "f" 'lsp-ui-doc-focus-frame))


  (use-package company-lsp :commands company-lsp)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)
#+END_SRC

** Mu4e
The context definitions are in =private.org=.
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :load-path "~/.local/share/emacs/site-lisp/mu4e/"
    :config

    (setq
     mail-user-agent 'mu4e-user-agent
     mu4e-update-interval 60
     message-send-mail-function 'smtpmail-send-it
     mu4e-use-fancy-chars t
     mu4e-attachment-dir "~/Downloads"
     mu4e-view-show-images t
     mu4e-headers-fields '((:human-date . 25)
                           (:flags . 6)
                           (:from . 22)
                           (:thread-subject . nil)))
    (auth-source-pass-enable))
#+END_SRC

Store org-mode links to emails
#+BEGIN_SRC emacs-lisp
  (require 'org-mu4e)
#+END_SRC
*** Keybindings
All keybindings are redefined for evil
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'mu4e-headers-mode 'normal)
  (general-define-key
   :keymaps 'mu4e-headers-mode-map
   :states 'normal
   "RET" 'mu4e-headers-view-message
   "!" 'mu4e-headers-mark-for-read
   "#" 'mu4e-mark-resolve-deferred-marks
   "$" 'mu4e-show-log
   "%" 'mu4e-headers-mark-pattern
   "&" 'mu4e-headers-mark-custom
   "*" 'mu4e-headers-mark-for-something
   "+" 'mu4e-headers-mark-for-flag
   "-" 'mu4e-headers-mark-for-unflag
   "/" 'mu4e-headers-search-narrow
   "n" 'mu4e-headers-rerun-search
   ";" 'mu4e-context-switch
   "?" 'mu4e-headers-mark-for-unread
   "A" 'mu4e-headers-mark-for-action
   "B" 'mu4e-headers-search-bookmark-edit
   "C" 'mu4e-compose-new
   "D" 'mu4e-headers-mark-for-delete
   "E" 'mu4e-compose-edit
   "F" 'mu4e-compose-forward
   "H" 'mu4e-display-manual
   "O" 'mu4e-headers-change-sorting
   "P" 'mu4e-headers-toggle-threading
   "Q" 'mu4e-headers-toggle-full-search
   "R" 'mu4e-compose-reply
   "S" 'mu4e-headers-search-edit
   "T" 'mu4e-headers-mark-thread
   "U" 'mu4e-mark-unmark-all
   "V" 'mu4e-headers-toggle-skip-duplicates
   "W" 'mu4e-headers-toggle-include-related
   "[" 'mu4e-headers-prev-unread
   "\\" 'mu4e-headers-query-prev
   "]" 'mu4e-headers-next-unread
   "a" 'mu4e-headers-action
   "b" 'mu4e-headers-search-bookmark
   "d" 'mu4e-headers-mark-or-move-to-trash
   "m" 'mu4e-headers-mark-for-move
   "q" 'mu4e~headers-quit-buffer
   "r" 'mu4e-headers-mark-for-refile
   "s" 'mu4e-headers-search
   "t" 'mu4e-headers-mark-subthread
   "u" 'mu4e-headers-mark-for-unmark
   "x" 'mu4e-mark-execute-all
   "y" 'mu4e-select-other-view
   "J" 'mu4e~headers-jump-to-maildir
   "k" 'mu4e-headers-prev
   "j" 'mu4e-headers-next)
#+END_SRC

*** Customization
#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-headers-mode-hook '(lambda () (setq show-trailing-whitespace nil)))
  (add-hook 'mu4e-view-mode-hook '(lambda () (setq show-trailing-whitespace nil)))
  (setq shr-color-visible-luminance-min 80)

  (add-to-list 'mu4e-headers-actions '("in browser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions '("in browser" . mu4e-action-view-in-browser) t)
#+END_SRC

** Newsticker
#+BEGIN_SRC emacs-lisp
  (require 'newsticker)
  (setq newsticker-url-list
        '(("SMBC" "https://www.smbc-comics.com/comic/rss" nil nil nil)
         ("XKCD" "https://xkcd.com/rss.xml")
         ("Fowl Language" "https://www.fowllanguagecomics.com/feed/")
         ("Itchy Feet" "https://www.itchyfeetcomic.com/feeds/posts/default?alt=rss")))
#+END_SRC

** Parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t)
    (setq show-parent-delay 0)
    (show-paren-mode 1))

  (use-package rainbow-delimiters
    :hook ((web-mode . rainbow-delimiters-mode)
           (emacs-lisp-mode . rainbow-delimiters-mode)))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy))
#+END_SRC

** Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :hook (after-init . org-roam-mode)
    :custom
    (org-roam-directory (concat (file-name-as-directory (getenv "HOME")) "org/roam"))
    :config
    (setq org-roam-completion-system 'ivy))

  (use-package company-org-roam
    :config (push 'company-org-roam company-backends))

#+END_SRC

** Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :config
    (general-define-key
     :states 'normal
     :prefix ", s"
     "s" 'rg-dwim
     "p" 'rg-project
     "l" 'rg-list-searches
     "S" 'rg-save-search))
#+END_SRC

** Solaire
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (solaire-global-mode +1)
    (solaire-mode-swap-bg))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :config
    (treemacs-follow-mode t)
    (treemacs-git-mode 'deferred)
    (treemacs-filewatch-mode t)
    (general-define-key
     :states 'normal
     :prefix ", t"
     "t" 'treemacs
     "f" 'treemacs-find-file
     "p" 'treemacs-projectile
     "P" 'treemacs-add-and-display-current-project))
  (use-package treemacs-evil
    :after treemacs evil)
  (use-package treemacs-projectile
    :after treemacs projectile)
  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC

** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** Writeroom mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode)
#+END_SRC

* Languages
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :custom (css-indent-offset 2))
  (use-package scss-mode
    :mode ("\\.scss$" "\\.sass$"))
#+END_SRC

** CSV
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC

** Dart
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode)
  (use-package lsp-dart
   :hook (dart-mode . lsp-deferred))
  (setq-default lsp-dart-sdk-dir (concat
                                  (file-name-as-directory (getenv "HOME"))
                                  "local/dart-sdk"))
#+END_SRC

We also want some Flutter support

#+BEGIN_SRC emacs-lisp
  (use-package flutter
    :after dart-mode
    :custom (flutter-sdk-path (concat (file-name-as-directory (getenv "HOME")) "local/flutter")))
#+END_SRC

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode :mode "Dockerfile")
#+END_SRC

** Emacs-Lisp
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'emacs-lisp-mode-map
   :prefix ", ."
   "e e" 'eval-last-sexp
   "e b" 'eval-buffer)
#+END_SRC

** Fish
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC

** Graphql
#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode)
#+END_SRC

** Groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC

** JS & friends
*** Json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json$")
  (add-to-list 'flycheck-disabled-checkers 'json-python-json)
#+END_SRC

*** JS
#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

*** Typescript
#+BEGIN_SRC emacs-lisp
  (defun my-web-mode-hook ())
  (defun my-tide-setup-hook ()
    (tide-setup)
    (eldoc-mode)
    (tide-hl-identifier-mode +1)

    (setq web-mode-enable-auto-quoting nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-attr-value-indent-offset 2)
    (set (make-local-variable 'company-backends)
         '((company-tide company-files :with company-yasnippet)
           (company-dabbrev-code company-dabbrev)))
    (flycheck-add-mode 'typescript-tslint 'web-mode)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix ", ."
     "f" 'tide-fix
     "i" 'tide-organize-imports
     "u" 'tide-references
     "R" 'tide-restart-server
     "d" 'tide-documentation-at-point
     "F" 'tide-format

     "e s" 'tide-error-at-point
     "e l" 'tide-project-errors
     "e i" 'tide-add-tslint-disable-next-line
     "e n" 'flycheck-next-error
     "e p" 'flycheck-previous-error

     "r r" 'tide-rename-symbol
     "r F" 'tide-refactor
     "r f" 'tide-rename-file)
    (general-define-key
     :states 'normal
     :keymaps 'local
     :prefix "g"
     :override t

     "d" 'tide-jump-to-definition
     "D" 'tide-jump-to-implementation
     "b" 'tide-jump-back))

  (use-package prettier-js
    :defer t)
  (use-package tide
    :defer t)

  (use-package web-mode
    :mode (("\\.tsx$" . web-mode))
    :init
    (add-hook 'web-mode-hook 'variable-pitch-mode)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook (lambda () (pcase (file-name-extension buffer-file-name)
                        ("tsx" (my-tide-setup-hook))
                        (_ (my-web-mode-hook))))))

  (use-package typescript-mode
    :mode (("\\.ts$" . typescript-mode))
    :init
    (add-hook 'typescript-mode-hook 'my-tide-setup-hook)
    (add-hook 'typescript-mode-hook 'company-mode)
    (add-hook 'typescript-mode-hook 'prettier-js-mode))


  (setq-default typescript-indent-level 2)
  (setq-default tide-tsserver-executable "/home/aleks/local/npm/bin/tsserver")
#+END_SRC

** Kotlin
Only basic support :(
#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode)
#+END_SRC

** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode)
  (use-package flycheck-ledger
    :after flycheck)
  (defun browse-paypal-history-at-point ()
    "Open paypal.com order history.  The search term is an exact date range from `thing-at-point'."
    (interactive)
    (let ((date (substring (replace-regexp-in-string
                            (regexp-quote "/") "-"
                            (thing-at-point 'symbol 'no-props)
                            nil 'literal)
                           0 10)))
      (browse-url (concat "https://www.paypal.com/myaccount/transactions/?start_date=" date "&end_date=" date))))
  (defun browse-amazon-history-at-point ()
    "Open amazon.de order history.  The search term is `thing-at-point'."
    (interactive)
    (browse-url (concat "https://www.amazon.de/gp/your-account/order-history/?search=" (thing-at-point 'symbol 'no-props))))
  (general-define-key
   :states 'normal
   :keymaps 'ledger-mode-map
   :prefix ", ."
   "a" 'browse-amazon-history-at-point
   "p" 'browse-paypal-history-at-point)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'"
    :interpreter "lua")
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :config (setq markdown-fontify-code-blocks-natively t))
#+END_SRC

** Org-Mode
*** Installation
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
#+END_SRC

*** Prettification
Use =variable-pitch-mode= for org, but also correctly format
everything that needs fixed pitch.
#+BEGIN_SRC emacs-lisp
  (use-package org-variable-pitch
    :hook ((org-mode . org-variable-pitch-minor-mode)))
#+END_SRC

Enable indent mode, so spaces don't clutter the file.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook (
           (org-mode . org-indent-mode)
           (org-mode . (lambda ()
                         (setq left-margin-width 2
                               right-margin-width 2))))
    :custom
    (setq-default org-edit-src-content-indentation 2))
#+END_SRC

Prettier lists, by substituting bullet points for list item markers.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

Some more prettification
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook ((org-mode . org-bullets-mode))
    :config (setq org-bullets-bullet-list '(" ")))

  (setq org-fontify-whole-heading-line t
        org-pretty-entities t)
#+END_SRC

Headline sizes
#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   `(org-level-4 ((t (:height 1.2 :background nil))))
   `(org-level-3 ((t (:weight bold :height 1.25 :background nil))))
   `(org-level-2 ((t (:height 1.5 :background nil))))
   `(org-level-1 ((t (:weight bold :height 1.75 :background nil))))
   `(org-document-title ((t (:height 2.0 :underline nil)))))
#+END_SRC

Hide emphasis markers, gives a bit more of a WYSIWYG feel.
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   :prefix ","
   "'" 'org-edit-special
   ". '" 'org-edit-special
   ". o" 'org-open-at-point
   ". h" 'org-promote-subtree
   ". l" 'org-demote-subtree
   ". a" 'org-archive-subtree
   ". s" 'org-schedule
   ". d" 'org-deadline
   ". e" 'org-set-effort
   ". c c" 'org-clock-in
   ". c o" 'org-clock-out
   ". c g" 'org-clock-goto
   ". c x" 'org-clock-cancel
   ". r" 'org-refile)
  (general-define-key
   :states 'normal
   :prefix ", o"
   "a" 'org-agenda)
  (general-define-key
   :states 'normal
   :prefix ", c"
   "i" 'org-clock-in-last
   "g" 'org-clock-goto
   "o" 'org-clock-out)

  (add-hook 'org-src-mode-hook
            (lambda ()
              (general-define-key
               :keymaps 'local
               :states 'normal
               "RET" 'org-edit-src-exit
               "BS" 'org-edit-src-abort)))
#+END_SRC

*** Org-Agenda keybindings
#+BEGIN_SRC emacs-lisp

  (general-define-key
   :keymaps 'org-agenda-mode-map

   "k" 'org-agenda-previous-item
   "j" 'org-agenda-next-item
   "I" 'org-agenda-diary-entry
   "i" 'org-agenda-clock-in
   "s" 'org-agenda-schedule
   "c" 'org-capture
   "O" 'delete-other-windows
   "o" 'org-agenda-clock-out)
#+END_SRC

*** Basic configuration
Org-directory is =~/org=
#+BEGIN_SRC emacs-lisp
  (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "org")
        org-agenda-include-diary nil
        my-org-main-file (concat (file-name-as-directory org-directory) "main.org")
        my-org-work-file (concat (file-name-as-directory org-directory) "work.org"))
#+END_SRC

*** Agenda views
All TODO entries that have not already been scheduled
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("u" "Unscheduled TODO" todo ""
           ((org-agenda-overriding-header "\nUnscheduled TODO")
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))))
#+END_SRC

*** Calendar
We want our weeks to start properly
#+BEGIN_SRC emacs-lisp
  (add-hook 'calendar-load-hook (lambda () calendar-set-date-style 'european))
#+END_SRC

Set the calendar location for sunset & sunrise. Tübingen Hbf is: =48.516738, 9.055493=
#+BEGIN_SRC emacs-lisp

  (setq calendar-longitude 48.5
        calendar-latitude 9.0
        calendar-location-name "Tübingen, Germany")

#+END_SRC

*** Editing documents
Place footnotes in the same section.
#+BEGIN_SRC emacs-lisp
  (setq-default org-footnote-section nil)
#+END_SRC

*** Refiling behaviour
Facilitate outlining by just matching on any heading in the org
file. Using ivy, this ends up being more usable.
#+BEGIN_SRC emacs-lisp
  (let ((file-list (mapcar (lambda (file) (concat (file-name-as-directory org-directory) file))
                           '("main.org" "work.org"))))
    (--each (--filter (file-readable-p it) file-list)
      (add-to-list 'org-agenda-files it)))

  (setq
   org-outline-path-complete-in-steps nil
   org-refile-targets '((nil . (:maxlevel . 4)))
   org-refile-use-outline-path 'file)
#+END_SRC

*** Capture
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix ", c"
   "c" 'org-capture
   "l" '(bookmark-jump "org-capture-bookmark"))

  (setq org-capture-templates
        '(
          ("c" "Todo" entry (file+headline my-org-main-file "NEW")
           "* TODO %^{Title}\nCreated: %U\nRef: %f %a\n%i")
          ("w" "Work" entry (file+headline my-org-work-file "NEW")
           "* TODO %^{Title}\nCreated: %U\nRef: %f %a\n%i")))
#+END_SRC

Keybindings in capture mode
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :modes 'org-capture-mode
   :states 'normal
   :prefix ", ."
   "c" 'org-capture-finalize
   "r" 'org-capture-refile
   "k" 'org-capture-kill
   "x" 'org-capture-kill)
#+END_SRC

*** Reveal
Support for generating slides from org mode
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
  (use-package ox-reveal)
#+END_SRC

*** Contrib
*** Protocol
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC

In order to get Gnome to handle the URL correctly, save this to =~/.local/share/applications/org-protocol.desktop=.

#+BEGIN_SRC conf
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
#+END_SRC

and run

#+BEGIN_SRC shell
  update-desktop-database ~/.local/share/applications/
#+END_SRC

Then use the following bookmarklet for capturing:

#+BEGIN_SRC fundamental
  javascript:location.href='org-protocol://capture://c/'+
        encodeURIComponent(location.href)+'/'+
        encodeURIComponent(document.title)+'/'+
        encodeURIComponent(window.getSelection())
#+END_SRC

Note the =/c/= in the URL, it denotes the capture template we want to use.

Further details are in [[https://orgmode.org/worg/org-contrib/org-protocol.html][the documentation]].
*** Ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :config
    (setq reftex-default-bibliography '("~/doc/lib/bib/main.bib")
          org-ref-default-bibliography '("~/doc/lib/bib/main.bib")
          org-ref-pdf-directory "~/doc/lib"
          org-ref-bibliography-notes "~/doc/lib/notes.org"
          bibtex-completion-pdf-open-function 'org-open-file
          org-ref-completion-library 'org-ref-ivy-cite))
#+END_SRC


** Rust
#+BEGIN_SRC emacs-lisp
  (use-package rustic)
  (setq rustic-lsp-server 'rust-analyzer)
  (setq lsp-rust-server 'rust-analyzer)
  (setq lsp-rust-analyzer-server-command '("~/.local/bin/rust-analyzer"))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :mode "\\.ya?ml$")
#+END_SRC

